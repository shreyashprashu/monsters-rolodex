{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RACaA,G,kBAAM,SAACC,GAEhB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,aCJbC,EAAS,SAACR,GAEvB,OACI,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJTM,G,MAAU,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACpC,OACA,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCCG,E,kDApCf,aAAc,IAAD,8BACX,gBAiBAH,aAAc,SAACI,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAhBlC,EAAKC,MAAQ,CACbb,SAAS,GACTU,YAAY,IALH,E,gEAaO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAK/B,IAAD,EACuBC,KAAKN,MAA3Bb,EADD,EACCA,SAASU,EADV,EACUA,YACVU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACI,sBAAK9B,UAAU,MAAf,UACE,kDACF,cAAC,EAAD,CAAWW,YAAY,kBACZC,aAAce,KAAKf,eAE9B,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BVI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.24a96a09.chunk.js","sourcesContent":["import './card.styles.css';\nexport const Card =(props)=>{\n\n    return <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2> {props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n        </div>\n}","import './card-list.styles.css';\nimport { Card } from '../card/card.component'\nexport const CardList=(props)=>{\n    //console.log(props);\nreturn (\n    <div className='card-list'>\n    {props.monsters.map(monster =>(\n    <Card key={monster.id} monster={monster}/>)\n    )} \n    </div>);\n\n}","import './search-box.styles.css';\n\n\n export const SearchBox=({ placeholder ,handleChange})=>{\n    return(\n    <input \n    className='search'\n    type='search' \n    placeholder={placeholder} \n    onChange={handleChange}\n/>\n    )\n}","import { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nclass App extends Component {\nconstructor(){\n  super();\n\n    this.state = {\n    monsters:[],\n    searchField:''\n  }\n // this.handleChange=this.handleChange.bind(this); \n //use arrow functions instead\n}\n\n  \n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters: users}))\n}\n  handleChange =(e)=>{\n  this.setState({searchField:e.target.value})\n  }\n  render(){\n    const {monsters,searchField}=this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters'\n                   handleChange={this.handleChange}\n                    />\n        <CardList monsters={filteredMonsters}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}